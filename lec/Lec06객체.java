package com.kosta.lec;
 
/**
 // 객체 - 정적(변수), 동적(메서드)
 // 객체를 감싸고 있는 애 = 클래스
 // 생성자(constructor)는 함수, 나머지는 메소드
 // 객체 - 타이핑해서 변수에 저장한 것 , 인스턴스 - 메모리에 올라간것.
 // 1960년대 최초 객제지향언어 Simula 탄생 
 // Swift => ios
 
 객체지향 언어의 특징
 1. 기존 프로그래밍 언어와 크게 다르지 않다.
 2. 코드 재사용성 높다.
 3. 코드 관리가 쉽다.
 4. 신뢰성 높은 프로그램 개발이 가능. 
 
 인스턴스 생성과 사용.
 1. 인스턴스 생성 방법.
 클래스명 참조변수명 ;  -- 객체를 다루기 위한 참조변수 선언.
 참조변수명 = new 클래스명(); -- 객체생성 후, 생성된 객체의 주소를 참조변수에 저장.
 
 Tv t;
 t = new Tv();
 
 Tv t = new Tv();
*/

/**
 * 인스턴스 		: 변수/메서드 --> new
 * 클래스(static) : 변수/메서드 --> static
 * 메모리에 올라간다 == 인스턴스 화 == 주소가 있다 == 참조가능(쓸 수 있다) : new, static
 */
public class Lec06객체 {  // 인스턴스화 해야하는데, class 자체를 new해서 
	// 전역변수
		   int iv = 0;	// 인스턴스(화 new)변수
	static int cv = 0;	// 클래스(static)변수, (기울임 == 클래스 변수)
	// 인스턴스 변수 = 인스턴스화를 해야 쓸 수 있는 변수. 즉,new를 해야한다. = 클래스에서 사용하는 static 없는 변수 
	// static은 new를 하지 않아도 메모리에 올라간다. => static 있으면 
	
	/**
	 * 오버로딩(over loading) : (하나의 클래스)에서 메서드 복붙해서 에러 안나게!
	 * 1. 메서드 이름을 같게 해라.
	 * 2. 괄호를 변형 --> 파라미터의 타입 또는 갯수를 다르게 해라.
	 * 메서드의 괄호안에 들어간 변수 : 매개변수 = 아규먼트= 파라미터 = 인자
	 * duplicate (중복) : 같은 클래스 메서드 복붙하면!
	*/
	
	// 인스턴스(화 new) 메서드 => static 제거. === 일반 메서드
	public void main(String args) { 	// 오버로딩
		// iv는 인스턴스변수, main은 인스턴스 메서드는 --> new --> 클래스의 객체를 만들어서 참조변수.iv 호출 (참조변수는 주소가 있다는 것)
		// cv는 클래스(static)변수 --> static은 (실행시점에 메모리에 상주). 클래스.cv 호출 ==> new 없이 클래스로 호출.
		//						-> new -->  참조변수.cv 호출  :: 두가지 방법 다 사용가능.
		System.out.println(iv);
		System.out.println(cv);	// 클래스변수는 주소가 있어 참조가 가능하기때문에 호출이 가능하다.
		System.out.println("인스턴스 main 메서드");
	}

	// 컴퓨터가 먼저 찾는 것, 기억하는 것 == 주소
	// 클래스(static) 메서드 == 클래스랑 같이 살고 죽는 애. static이 붙은 메서드를 클래스가 붙는다.
	public static void main(String[] args) { // 메서드 안에 파라미터 == 변수. 
		// System.out.println(iv);
		System.out.println(cv);
		
		// 지역변수 
		int num = 0;
		System.out.println(num);
		/**
		 * 
		 * -----------------------------------------------------------------------------
		 * 에러 : iv는 인스턴스 변수이기 때문에 클래스(static)메서드에서는 호출이 불가하기 때문에 에러가 난다. 
		 * -----------------------------------------------------------------------------
		 * System.out.println(iv);		//에러
		 * 
		 * -------------------------------------------------------------------
		 * 해결 : (iv)인스턴스 변수를 호출하려면 클래스 객체를 만들어서 참조변수.iv 이렇게 호출. 
		 * -----------------------------------------------------------------
		 * Lec06객체 rv = new Lec06객체();	//  reference 변수 = 참조변수
		 * System.out.println(rv.iv);
		 */
		Lec06객체 rv = new Lec06객체();
		System.out.println(rv.iv); 	// 인스턴스 변수 : 참조변수.iv
		System.out.println(Lec06객체.cv); 	// 클래스변수 : 클래스명.cv
		System.out.println(cv); 	// 클래스변수 : (클래스명)cv
		// main과 cv 둘다 static으로 되어 있어 클래스명을 생략하고 변수명으로 사용해도 소용이 없다.
		
		
		//============================ 오후

		// 메서드 = 클래스 없으면 단독으로 사용 불가. 즉, 클래스 안에 사용하는 것이라 알고 있어야 함.
		// 메서드가 호출될 때, 사용되는 것.
		
		
	}

}
